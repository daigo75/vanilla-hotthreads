<?php if (!defined('APPLICATION')) exit();
/**
{licence}
*/

/**
 * Renders the widget that displays the top X Hot Threads.
 */
class HotThreadsListModule extends Gdn_Module {
	// @var Gdn_DataSet The dataset containing the list of the Hot Threads.
	private $_HotThreads;
	// @var int The maximum amount of entries to display in the Hot Threads widget.
	private $_MaxEntries;

	/**
	 * Class constructor.
	 *
	 * @return HotThreadsListModule.
	 */
	public function __construct($Sender = '') {
		parent::__construct($Sender);
	}

	/**
	 * Loads the list of Hot Discussions.
	 */
	public function LoadData($MaxEntries = HOTTHREADS_DEFAULT_MAXENTRIES,
													 $ViewsThreshold = HOTTHREADS_DEFAULT_VIEWSTHRESHOLD,
													 $CommentsThreshold = HOTTHREADS_DEFAULT_COMMENTSTHRESHOLD,
													 $AgeThreshold = HOTTHREADS_DEFAULT_AGETHRESHOLD) {
		$this->_MaxEntries = $MaxEntries;

		/* Half a day is added to the Age Threshold because we want to give maximum
		 * priority to all the Discussion whose age is less than, or equal to the
		 * configured value. Due to the calculation performed to determine priority,
		 * a Discussion whose age is equal to the threshold would get a priority of
		 * "1", rather than the correct "0".
		 * By adding half a day, the calculation will produce a result which is less
		 * than 1, giving the Discussions the correct priority.
		 */
		$AgeThreshold = (int)$AgeThreshold + 0.5;

		$DiscussionModel = new DiscussionModel();
		$DiscussionModel->SQL
			->Select('FLOOR((TO_DAYS(NOW())-TO_DAYS(d.DateLastComment))/' . $AgeThreshold . ')', '', 'AgeWeight')
			->Select('(TO_DAYS(NOW())-TO_DAYS(d.DateLastComment))', '', 'Age')
			->BeginWhereGroup()
			->Where('d.CountViews >=', $ViewsThreshold)
			->OrWhere('d.CountComments >=', $CommentsThreshold)
			->EndWhereGroup()
			->OrderBy('AgeWeight', 'asc')
			->OrderBy('d.CountComments', 'desc')
			->OrderBy('d.CountViews', 'desc');

		$this->_HotThreads = $DiscussionModel->Get(0, $this->_MaxEntries);
	}

	/**
	 * Specifies the target Asset for the module.
	 *
	 * @return string The target Asset where the module will be rendered (usually
	 * "Panel").
	 */
	public function AssetTarget() {
		return 'Panel';
	}

	/**
	 * Renders a list of <li> items displaying the Hot Threads.
	 *
	 * This method can be used in two ways:
	 * - By HotThreadsListModule::ToString(), to render the list inside the Hot
	 *   Threads widget.
	 * - Externally, to just render the list items, with the purpose of updating
	 *   the widget content via AJAX.
	 *
	 * @return string Some HTML containing a list of <li> items, displaying the
	 * hot discussions, or a single <li> with a message if there are not hot
	 * discussions to be displayed.
	 */
	public function RenderListItems() {
		// If there are no Hot Threads to display, just show a message
		if($this->_HotThreads->NumRows() <= 0) {
			echo Wrap(T('None yet.'), 'li');
		}

		// Show a list of the Hot Threads
		foreach($this->_HotThreads->Result() as $Post) {
			$PostTitle = Anchor(Gdn_Format::Text($Post->Name),
													'discussion/' . $Post->DiscussionID . '/' . Gdn_Format::Url($Post->Name),
													'Title');

			$ItemCSSClass = ($Post->CountUnreadComments > 0) ? 'New' : '';

			// If there is a comment, let's use that, otherwise use the original poster
			if ($Post->LastName) {
				$LastComment = Anchor(Gdn_Format::Text($Post->LastName), 'profile/'.$Post->UpdateUserID.'/'.Gdn_Format::Url($Post->LastName), 'PostAuthor' );
			}
			else {
				$LastComment = Anchor(Gdn_Format::Text($Post->FirstName), 'profile/'.$Post->InsertUserID.'/'.Gdn_Format::Url($Post->FirstName), 'PostAuthor' );
			}
			$PostDate = Wrap(T('on ') . Gdn_Format::Date($Post->DateLastComment),
											 'span',
											 array('class' => 'PostDate')
											 );
			$PostDetails = Wrap($LastComment . "\n" . $PostDate,
													'div',
													array('class' => 'Condensed')
													);


			echo Wrap($PostTitle . "\n" . $PostDetails,
				'li',
				array('class' => $ItemCSSClass,)
			);
		}
	}

	/**
	 * Renders the output for the module.
	 *
	 * @return string The HTML generated by the module.
	 */
	public function ToString() {
		// If there are no Hot Threads to display, and the Admin chose to hide the
		// module completely in this case, return an empty string
		if(C('Plugin.HotThreads.HideIfEmpty', HOTTHREADS_DEFAULT_HIDEIFEMPTY) &&
			 $this->_HotThreads->NumRows() <= 0) {
			return '';
		}

		ob_start();
		?>
		<div id="HotThreadsList" class="Box">
			<h4>
				<?php
					// Title uses the word "Discussions", rather than "Threads", because
					// that is the word that normally identifies threads in the User Interface
					echo Anchor(sprintf(T('Top %d Hot Discussions'), $this->_MaxEntries), HOTTHREADS_PAGE_URL);
				?>
			</h4>
			<ul id="HotThreadsList_Items" class="PanelInfo">
			<?php
				$this->RenderListItems();
			?>
			</ul>
			<div class="Footer">
				<?php
					// Title uses the word "Discussions", rather than "Threads", because
					// that is the word that normally identifies threads in the User Interface
					echo Wrap(Anchor(T('more...'), HOTTHREADS_PAGE_URL));
				?>
			</div>
		</div>
		<?php
		$Output = ob_get_contents();
		@ob_end_clean();
		return $Output;
	}
}
